package apm

import (
	"apm/gadgets/memory"
	"github.com/argennon-project/csgo/transpiled/cmp"
	"github.com/argennon-project/csgo/transpiled/selector"
	"math/big"
)

var comparator *cmp.BoundedComparator

type State struct {
	instructions []csv
	pc           csv
	acc          csv
	cache        memory.Writable
}

func NewState(instructions []csv, cache memory.Writable) *State {
	comparator = cmp.NewBoundedComparator(big.NewInt(1<<32-1), false)
	return &State{
		instructions: instructions,
		pc:           0,
		acc:          0,
		cache:        cache,
	}
}

rel (s *State) Transit() {
	var instruction, _ <== selector.Mux<>(s.pc, s.instructions...)
	var op, memRead, memWrite, jmp, memAddr, instructionOp <== decodeInstruction<>(instruction)

	var read, indicators <== s.cache.Read<>(memAddr)

	var operand, _ <== selector.Mux<>(memRead, instructionOp, read)

	var add <== s.acc + operand
	var sub <== s.acc - operand
	var mul <== s.acc * operand
	var less <== comparator.IsLess<>(s.acc, operand)

	var res, _ <== selector.Mux<>(op, add, sub, mul, 0-sub)
	s.acc, _ <== selector.Mux<>(memWrite, res, instructionOp)

	var write, _ <== selector.Mux<>(memWrite, read, res)
	s.cache.Write<>(write, indicators)

	// less is constrained to be a boolean but jmp is not, so we need to add a
	// boolean constraint for jmp.
	api.Api.AssertIsBoolean(jmp)
	var jmpAndLess <== jmp * less
	s.pc <== (1-jmpAndLess)*(s.pc+1) + jmpAndLess*instructionOp
}

rel (s *State) AssertOutputIs(values []csv) {
	s.cache.AssertValuesAre(values)
}

rel decodeInstruction(instruction csv) (op, memRead, memWrite, jmp, memAddr, operand csv) {
	var parts []csv
	decodeHint<6>(instruction) -> parts

	pow2_69 := new(big.Int).Lsh(big.NewInt(1), 69)
	parts[0] + (1<<2)*parts[1] + (1<<3)*parts[2] + (1<<4)*parts[3] + (1<<5)*parts[4] + pow2_69*parts[5] === instruction
	// We need to constrain each part of the decoded instruction to be in the
	// appropriate range. This is done outside of this function:
	// op, memRead, memWrite are constrained by Multiplexers
	// jmp is constrained explicitly
	// memAddr is constrained by the memory module
	// operand does not need to be constrained since it is the last part of the
	// decomposition
	op <== parts[0]
	memRead <== parts[1]
	memWrite <== parts[2]
	jmp <== parts[3]
	memAddr <== parts[4]
	operand <== parts[5]
	return
}

hint decodeHint(_ *big.Int, inputs, results []*big.Int) error {
	instruction := inputs[0]
	results[0].And(instruction, big.NewInt(0b11))       // op
	results[1].SetUint64(uint64(instruction.Bit(2)))	// memRead
	results[2].SetUint64(uint64(instruction.Bit(3)))	// memWrite
	results[3].SetUint64(uint64(instruction.Bit(4)))	// jmp
	results[4].And(new(big.Int).Rsh(instruction, 5), new(big.Int).SetUint64(1<<64-1)) // memAddr
	results[5].Rsh(instruction, 69)                     // operand
	return nil
}
